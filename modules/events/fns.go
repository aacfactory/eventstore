// NOTE: This file has been automatically generated by github.com/aacfactory/gcg. Dont Edit it.

package events

import (
	"context"

	"github.com/aacfactory/errors"
	"github.com/aacfactory/fns/service"
	"github.com/aacfactory/fns/service/documents"
	"github.com/aacfactory/fns/service/validators"
)

const (
	_name      = "events"
	_consumeFn = "consume"
)

func Consume(ctx context.Context, argument ConsumeArgument) (result []*Event, err errors.CodeError) {
	endpoint, hasEndpoint := service.GetEndpoint(ctx, _name)
	if !hasEndpoint {
		err = errors.NotFound("endpoint was not found").WithMeta("name", _name)
		return
	}
	fr := endpoint.Request(ctx, _consumeFn, service.NewArgument(argument))
	handled := make([]*Event, 0, 1)
	hasResult, handleErr := fr.Get(ctx, &handled)
	if handleErr != nil {
		err = handleErr
		return
	}
	if hasResult {
		result = handled
	}
	return
}

func Service() (svc service.Service) {
	components := []service.Component{}
	svc = &_service_{
		Abstract: service.NewAbstract(
			_name,
			false,
			components...,
		),
	}
	return
}

type _service_ struct {
	service.Abstract
}

func (svc *_service_) Handle(ctx context.Context, fn string, argument service.Argument) (v interface{}, err errors.CodeError) {
	switch fn {
	case _consumeFn:
		// argument
		arg := ConsumeArgument{}
		scanErr := argument.As(&arg)
		if scanErr != nil {
			err = errors.BadRequest("events: scan request argument failed").WithCause(scanErr).WithMeta("service", _name).WithMeta("fn", _consumeFn)
			return
		}
		validateErr := validators.Validate(arg)
		if validateErr != nil {
			err = errors.BadRequest("events: invalid request argument").WithMeta("service", _name).WithMeta("fn", _consumeFn).WithCause(validateErr)
			return
		}
		// handle
		v, err = consume(ctx, arg)
		break
	default:
		err = errors.NotFound("events: fn was not found").WithMeta("service", _name).WithMeta("fn", fn)
		break
	}
	return

}

func (svc *_service_) Document() (doc service.Document) {
	sd := documents.NewService(_name, "Events service")
	sd.AddFn(
		"consume", "Consume events", "Consume aggregate domain events\n----------\nerrors:\n| Name                     | Code    | Description                   |\n|--------------------------|---------|-------------------------------|\n| events_consume_failed    | 500     | consume events failed         |", false, false,
		documents.Struct("main/modules/events", "ConsumeArgument", "Consume events argument", "Consume events argument").
			AddProperty("consumerId",
				documents.Int().SetTitle("Consumer id").SetDescription("Consumer id").AsRequired(`validate:"required" message:"consumerId is invalid"`),
			).
			AddProperty("aggregateName",
				documents.String().SetTitle("Aggregate name").SetDescription("Which aggregate name to be consumed").AsRequired(`validate:"required" message:"aggregateName is invalid"`),
			).
			AddProperty("offset",
				documents.Int().SetTitle("Offset").SetDescription("Offset of aggregate domain events, 0 is next of last consumed,").AsRequired(`validate:"required" message:"offset is invalid"`),
			).
			AddProperty("mode",
				documents.String().SetTitle("Consume mode").SetDescription("Consume mode").AddEnum("PULL", "PUSH"),
			),
		documents.Array(
			"", "", "",
			documents.Struct("main/modules/events", "Event", "", ""),
		),
	)
	doc = sd
	return
}
